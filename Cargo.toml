[package]
name = "gtfs-rust-wasm"
description = "Load a GTFS with Rust and WebAssembly"
version = "0.1.0"
authors = ["David Quintanel <david.quintanel@gmail.com>"]
categories = ["wasm"]
readme = "README.md"
edition = "2018"

[lib]
crate-type = ["cdylib"]

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[features]
# If you uncomment this line, it will enable `wee_alloc`:
#default = ["wee_alloc"]

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = "0.2.45"

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
wee_alloc = { version = "0.4.2", optional = true }
transit_model = {git = "https://github.com/datanel/transit_model", branch = "zip_reader" }
js-sys = "0.3"
chrono =  { version = "0.4", features = ["wasmbind"] }
wasm-bindgen-console-logger = "0.1.1"
log = "0.4.11"


# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.22"
features = [
    "console",
    "Blob",
    "Document",
    "Element",
    "Event",
    "File",
    "FileList",
    "FileReader",
    "HtmlElement",
    "HtmlInputElement",
    "Node",
    "ProgressEvent",
    "Window",
]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
[target."cfg(debug_assertions)".dependencies]
console_error_panic_hook = "0.1.5"

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "0.2.45"
futures = "0.1.27"
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"
